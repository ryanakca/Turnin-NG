\input texinfo   @c -*-texinfo-*-
@setfilename turnin-ng.info
@settitle Turnin-NG
@syncodeindex pg cp
@comment Commented out allowcodebreaks because it breaks on older versions of
@comment texi2pdf and there aren't any differences in output with or without it.
@comment @allowcodebreaks false
@set VERSION 2.0
@set UPDATED December 19 2020
@set UPDATED-MONTH December 20 2020
@comment %**end of header
@copying
This manual is for Turnin-NG (version @value{VERSION}, @value{UPDATED}).

Copyright @copyright{} 2009--2020 Ryan Kavanagh (@email{rak@@rak.ac}).

@quotation
Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
@end quotation
@end copying

@dircategory Turnin-NG Assignment Submission Suite
@direntry
* Turnin-NG: (turnin-ng).              The Turnin-NG Assignment Submission Suite
@end direntry

@titlepage
@title Turnin-NG
@subtitle Assignment Submission Suite
@subtitle Version @value{VERSION}, @value{UPDATED-MONTH}
@author Ryan Kavanagh (@email{rak@@rak.ac})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top, Introduction to Turnin-NG, (dir), (dir)
@top Turnin-NG
@ifinfo
This manual is for @code{Turnin-NG} (version @value{VERSION}, @value{UPDATED}).
@end ifinfo
@end ifnottex

@ifhtml
@insertcopying
@end ifhtml

@ifnottex
@menu
* Introduction to Turnin-NG::
* turnin::
* turnincfg::
* Distributing Turnin-NG::
@end menu
@end ifnottex

@node Introduction to Turnin-NG, turnin, Top, Top
@comment node-name, next, previous, up
@chapter Introduction to Turnin-NG

Turnin-NG is an assignment submission suite written in Python and composed of
@command{turnin} and @command{turnincfg}. Students can use the @command{turnin}
command to submit an assignment to a course. Professors and @acronym{TAs,
teaching assistants} can use @command{turnincfg} to manage submitted
assignments, making them easier to grade.

@node turnin, turnincfg, Introduction to Turnin-NG, Top
@chapter turnin

@command{turnin} compresses your assignments using the @command{tar} and
@command{gzip} formats before submitting them to be graded. If you feel so
inclined, @command{turnin} can cryptographically sign your assignments using
@command{GnuPG} to prevent someone from submitting an assignment in your name.

@menu
* Invoking turnin::
* Making turnin easier to use::
* Common situations for turnin::
@end menu

@node Invoking turnin, Making turnin easier to use, turnin, turnin
@section Invoking turnin

@command{turnin} was designed with ease of use in mind, all while retaining the
functionality of the original @command{turnin} command.

The command line format for turnin is as follows.

@code{
@command{turnin} [ -vhlw ] [ --version ] [ -p @var{project} ] [ -C @var{config} ]
                 [ -k @var{keyid} ] -c @var{course} files
}

You must provide the course name and a list of files to submit.

@table @code
@item @option{-v}, @option{--verbose}
Print a list of submitted files once they have been submitted.

@item @option{-h}, @option{--help}
Print a help message.

@item @option{-l}, @option{--list}
Print a list of projects, along with whether or not they are enabled and if the
project is the default project.

@item @option{--version}
Print turnin's version.

@item @option{-p}, @option{--project}
Set the project to which we'll submit our assignments. The project must be
enabled. If we do not pass this option, @command{turnin} will submit to the
@key{Default} project listed by the @option{-l} or @option{--list} option.

@item @option{-C}, @option{--config}
Path to an alternate configuration file.

@item @option{-k}, @option{--keyid}
Cryptographically sign an assignment using @command{gpg}.

@item @option{-c}, @option{--course}
Set the course to which we'll submit our assignments.

@item @option{-w}, @option{--legal}
Print warranty and license information.

@item @file{files}
The files and directories we want to submit
@end table


@node Making turnin easier to use, Common situations for turnin, Invoking turnin, turnin
@section Making turnin easier to use

You can use your shell's built in @command{alias} command to reduce the typing
required when using @command{turnin}. These aliases should be appended to your
shell's configuration file (@file{$HOME/.profile} for Bourne compatible shells).
If you are only in one course, you could use the following alias:

@example
@code{alias turnin='turnin -c YOUR_COURSE'}
@end example

If you are in multiple courses, the following aliases may be useful:

@example
@code{alias turnin-COURSE1='turnin -c COURSE1'}
@code{alias turnin-COURSE2='turnin -c COURSE2'}
@code{# ...}
@code{alias turnin-COURSEX='turnin -c COURSEX'}
@end example

If you want to always sign your assignments before submitting them, you could
use an alias like this one:

@example
@code{alias turnin='turnin -k E95EDDC9'}
@end example

Just make sure to replace the text in capitals with the appropriate information
and 'E95EDDC9' with your GnuPG key id.

@node Common situations for turnin,  , Making turnin easier to use, turnin
@section Examples

You want to submit an assignment, the files @file{bubblesort.hs} and
@file{radixsort.hs} to the course `cisc2323', but you aren't sure of the project
name. You start by finding the project list. To do this, you need to pass
the @option{-l} option to turnin, along with the required @option{-c
@var{coursename}} argument.

@smallexample
@code{
ryanakca@@zeus:~$ turnin -c cisc2323 -l
------------------------------------------------------------------------------------
| Enabled | Project      | Description                                             |
------------------------------------------------------------------------------------
| False   | searching    | Implement a binary search                               |
| True    | haskell_sort | Implement the bubble sort and the radix sort in Haskell |
| Default | bake         | Bake cookies for the professor                          |
| True    | museum_guard | Write a paper about the museum guard problem            |
| False   | packing      | Implement a packing algorithm                           |
------------------------------------------------------------------------------------}
@end smallexample

You see that you want the @option{haskell_sort} project. Since it is not the
default project, we will have to pass the @option{-p @var{project}} option, in
this case, @option{-p @var{haskell_sort}}, to turnin when we invoke it.

We now proceed to submit our assignments.
@smallexample
@code{
ryanakca@@zeus:~$ turnin -c cisc2323 -p haskell_sort bubblesort.hs radixsort.hs
Successfully submitted your assignment for grading.
}
@end smallexample

If we want to make sure @command{turnin} did not forget a file, we can pass the
@option{-v} or @option{--verbose} option when we invoke it.

@smallexample
@code{
ryanakca@@zeus:~$ turnin -c cisc2323 -p haskell_sort -v bubblesort.hs radixsort.hs
Submitted files:
sort-ryanakca
sort-ryanakca/bubblesort.hs
sort-ryanakca/radixsort.hs
}
@end smallexample

We decide that we had wanted to sign our submission, we can do so by passing the
@option{-k @var{KEYID}}.

@smallexample
@code{
ryanakca@@zeus:~$ turnin -c cisc-2323 -p haskell_sort -kD295EAC1 \
> bubblesort.hs radixsort.hs

You need a passphrase to unlock the secret key for
user: "Ryan Kavanagh <ryanakca@@kubuntu.org>"
1024-bit RSA key, ID D295EAC1, created 2009-07-13

gpg: gpg-agent is not available in this session
Successfully submitted your assignment for grading.
}
@end smallexample

If the project is still enabled and we want to resubmit our assignment, we may
do so by rerunning the @command{turnin} command.

@node turnincfg, Distributing Turnin-NG, turnin, Top
@chapter turnincfg

Turnin-NG's @command{turnincfg} command retains most of the functionality of the
original @command{project} command and seeks to make assignment management as
easy as possible. To make file management and storage as easy and efficient as
possible, each submission is compressed using the @command{tar} and
@command{gzip} formats.

@menu
* Invoking turnincfg::
* Common situations for turnincfg::
@end menu

@node Invoking turnincfg, Common situations for turnincfg, turnincfg, turnincfg
@section Invoking turnincfg

The author of Turnin-NG strived to make @command{turnincfg} as easy to use, all
while retaining the used functionality of the original @command{project}
command.

The command line format for turnincfg is as follows.

@code{
@command{turnincfg} [ -hdelripxvw ] [--version] [ -C @var{config} ] [ -c
@var{course} ] [ --create-course @var{course} ] [ --delete-course @var{course} ]
[ --archive-course @var{course} ] [ @var{project name} ]
}

@table @code
@item @option{--version}
Print @command{turnincfg}'s version.

@item @option{-h}, @option{--help}
Print a help message.

@item @option{-D}, @option{--perm-disable}
Permanently disable the current project and strip all unique suffixes. You will
generally want to use this option instead of @option{--disable}.

@item @option{-d}, @option{--disable}
Disable the current project.

@item @option{-e}, @option{--enable}
Enable submissions for the current project and make it the default project.

@item @option{-l}
Enable submissions for the current project but don't make it default.

@item @option{-r}, @option{--remove}
Remove the current project and all associated files.

@item @option{-i}, @option{--init}
Initialize this project.

@item @option{-p}, @option{--compress}
Compress this project using the @command{tar} and @command{gzip} formats.

@item @option{-x}, @option{--extract}
Extract this project.

@item @option{-v}, @option{--verify}
Verify @command{GnuPG} signatures on submitted projects.

@item @option{-C}, @option{--config}
Path to an alternate configuration file. The default configuration file is
@file{/etc/turnin-ng.cf}.

@item @option{-w}, @option{--legal}
Print warranty and license information.

@item @option{--create-course}
Create a course.

@item @option{--delete-course}
Delete a course and all associated files.

@item @option{--archive-course}
Archive a course using the @command{tar} and @command{gzip} formats to create a
@file{.tar.gz} file.
@end table

@node Common situations for turnincfg,  , Invoking turnincfg, turnincfg
@section Administration

A course (or many!) needs to be created by an administrator before users can use
the @command{turnincfg} and @command{turnin} commands.

There are two styles of course management: user managed and group managed. With
user managed courses, all project management actions are done with a single
account. With group management, project management actions are done by accounts
in a UNIX group. The original @command{project} and @command{turnin} commands
only supported user managed courses.

Due to the limited granularity of UNIX permissions, group managed courses permit
submissions from all accounts.

The following example shows the creation of a user managed course.

@smallexample
@code{
root@@zeus:~$ turnincfg --create-course cisc2323
Managing username [usually your UNIX login]: ryanakca
Full path to the course directory: /srv/submit/cisc2323
Managed by a User or Group [U/G]: U
Student group: students
Please make sure the account ryanakca is a member of the group students.
Successfully created the course cisc-2323.
}
@end smallexample

This creates a directory with the permissions and contents:
@smallexample
@code{
ryanakca@@zeus:~$ ls -lash /srv/submit/cisc2323
total 4,0K
   0 drwxr-xr-x  2 ryanakca students  60 19 Aug 13:01 ./
   0 drwxrwxrwt 17 root     root     400 19 Aug 13:12 ../
4,0K -rw-r--r--  1 ryanakca students 134 19 Aug 13:01 turnin-ng.cf
}
@end smallexample

Submission subdirectories for enabled projects will have the permissions
@code{0770} and an ownership of @code{MANAGING_USERNAME:STUDENT_GROUP}. Once
disabled, they will have the permissions @code{0700}.

The following example shows the creation of a group managed course. In this
case, we'll set the managing username to the professor's account and the
managing group to the group containing the course's professor and TAs.

@smallexample
@code{
root@@zeus:~$ turnincfg --create-course cisc2323
Managing username [usually your UNIX login]: ryanakca
Full path to the course directory: /srv/submit/cisc2323
Managed by a User or Group [U/G]: G
Managing group: cisc-2323
Successfully created the course cisc-2323.
}
@end smallexample

This creates a directory with the permissions and contents:
@smallexample
@code{
total 4,0K
   0 drwxrwxr-x  2 ryanakca cisc-2323  60 19 Aug 13:25 ./
   0 drwxrwxrwt 18 root     root      420 19 Aug 13:25 ../
4,0K -rw-rw-r--  1 ryanakca cisc-2323 121 19 Aug 13:25 turnin-ng.cf
}
@end smallexample

Submission subdirectories for enabled projects will have the permissions
@code{0777} and an ownership of @code{MANAGING_USERNAME:MANAGING_GROUP}. Once
disabled, they will have the permissions @code{0770}.

Once a course has finished, you may remove it from the global configuration file
and delete all files in its directory by running the command @command{turnincfg
--delete-course @var{COURSENAME}}. If you would rather keep its files
and still remove it from the global configuration file, you can run
@command{turnincfg --archive-course @var{COURSENAME}}. This will create
a @file{.tar.gz} file containing the course directory.

@section Examples

You're the professor for the course cisc2323 and want to create the project
`haskell_sort' for your students, enable submissions for it and make it the
default project (the default project is the project to which @command{turnin}
submits assignments if the student doesn't pass the @option{--project
@var{PROJECT}} option when invoking @command{turnin}).

@smallexample
@code{
ryanakca@@zeus:~$ turnincfg -i haskell_sort
[Optional] Project description: Implement a bubble sort and the radix sort using Haskell
Successfully created the project haskell_sort in the course cisc2323
ryanakca@@zeus:~$ turnincfg -e haskell_sort
Successfully enabled and set default the project haskell_sort
}
@end smallexample

In the previous example, we created the project @file{haskell_sort} by running
the command @command{turnincfg -i haskell_sort}.  Finally, we enabled it and set
it default by running @command{turnincfg -e haskell_sort}.

We want to close submissions for the project `haskell_sort' and compress it at
24:00 UTC, September 15 2009. We can do this using the @command{at} command.

@smallexample
@code{
ryanakca@@zeus:~$ at 2400 UTC Sep 15 2009
warning: commands will be executed using /bin/sh
at> turnincfg -c cisc2323
at> turnincfg -D haskell_sort
at> turnincfg -p haskell_sort
job 92 at Tue Sep 15 19:00:00 2009
}
@end smallexample

For more details on @command{at}'s time format, please see it's @command{man}
page. In this case we passed the @command{turnincfg -D haskell_sort} command
instead of the @command{turnincfg -d haskell_sort} command since we do not want
the long suffixed file names in the archive, we want them in the
@file{username.tar.gz} format.

@node Distributing Turnin-NG, , turnincfg, Top
@chapter Distributing Turnin-NG

Turnin-NG is Copyright @copyright{} 2009--2020 Ryan Kavanagh
(@email{rak@@rak.ac}). It is licensed under the terms of the GNU
General Public License version 2, or (at your option) any later version.

@menu
* GNU General Public License version 2::
@end menu

@node GNU General Public License version 2, , , Distributing Turnin-NG
@section GNU General Public License version 2

@include gpl-2.0.texi
@comment @node Index
@comment @unnumbered Index

@comment @printindex cp


@bye
